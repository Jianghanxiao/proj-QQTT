import pickle
import glob
import csv
import json
import numpy as np
from scipy.spatial import KDTree

base_path = "/home/hanxiao/Desktop/Research/proj-qqtt/proj-QQTT/data/different_types"
prediction_path = (
    "/home/hanxiao/Desktop/Research/proj-qqtt/proj-QQTT/exp_results/GNN_original/outdomain"
)
output_file = "results/final_track_gnn_outdomain.csv"


def evaluate_prediction(start_frame, end_frame, vertices, gt_track_3d, idx, mask):
    track_errors = []
    for frame_idx in range(start_frame, end_frame):
        # Get the new mask and see
        new_mask = ~np.isnan(gt_track_3d[frame_idx][mask]).any(axis=1)
        gt_track_points = gt_track_3d[frame_idx][mask][new_mask]
        pred_x = vertices[frame_idx][idx][new_mask]
        if len(pred_x) == 0:
            track_error = 0
        else:
            track_error = np.mean(np.linalg.norm(pred_x - gt_track_points, axis=1))

        track_errors.append(track_error)
    return np.mean(track_errors)


file = open(output_file, mode="w", newline="", encoding="utf-8")
writer = csv.writer(file)
writer.writerow(
    [
        "Case Name",
        "GT Track Error",
    ]
)

with open("out_domain.csv", "r") as f:
    reader = csv.reader(f)
    data = list(reader)

all_cases = []
for row in data:
    all_cases.append((row[0], row[1]))
    all_cases.append((row[1], row[0]))

for from_case, to_case in all_cases:
    exp_name = f"{from_case}_to_{to_case}"
    # if case_name != "single_lift_dinosor":
    #     continue
    print(f"Processing {exp_name}!!!!!!!!!!!!!!!")

    with open(f"{base_path}/{to_case}/split.json", "r") as f:
        split = json.load(f)
    frame_len = split["frame_len"]
    train_frame = split["train"][1]
    test_frame = split["test"][1]

    with open(f"{prediction_path}/render-{exp_name}-model_50/inference.pkl", "rb") as f:
        vertices = pickle.load(f)

    with open(f"{base_path}/{to_case}/gt_track_3d.pkl", "rb") as f:
        gt_track_3d = pickle.load(f)

    # Locate the index of corresponding point index in the vertices, if nan, then ignore the points
    mask = ~np.isnan(gt_track_3d[0]).any(axis=1)

    kdtree = KDTree(vertices[0])
    dis, idx = kdtree.query(gt_track_3d[0][mask])

    track_error = evaluate_prediction(1, test_frame, vertices, gt_track_3d, idx, mask)
    writer.writerow([exp_name, track_error])
file.close()
